/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { Suspense } from 'react';

export default function Developer({ animationName = 'clapping', ...props }) {
    const { nodes, materials } = useGLTF('/models/human/developer.glb');

    // Load the idle animation using useFBX
    const { animations: idleAnimations } = useFBX('/models/animations/clapping.fbx');
    idleAnimations[0].name = "clapping"; // Ensure the animation is named "idle"

    const group = useRef();
    const { actions } = useAnimations([idleAnimations[0]], group); // Bind animations to the group

    useEffect(() => {
        if (actions && actions[animationName]) {
            actions[animationName].reset().fadeIn(0.5).play();
        } else {
            console.error(`Animation ${animationName} not found.`);
        }

        // Cleanup on unmount
        return () => {
            if (actions && actions[animationName]) {
                actions[animationName].fadeOut(0.5);
            }
        };
    }, [actions, animationName]);

    return (
        <Suspense fallback={null}>
            <group {...props} dispose={null} ref={group}>
                <primitive object={nodes.Hips} />
                <skinnedMesh
                    name="EyeLeft"
                    geometry={nodes.EyeLeft.geometry}
                    material={materials.Wolf3D_Eye}
                    skeleton={nodes.EyeLeft.skeleton}
                    morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                    morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
                />
                <skinnedMesh
                    name="EyeRight"
                    geometry={nodes.EyeRight.geometry}
                    material={materials.Wolf3D_Eye}
                    skeleton={nodes.EyeRight.skeleton}
                    morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                    morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
                />
                <skinnedMesh
                    name="Wolf3D_Head"
                    geometry={nodes.Wolf3D_Head.geometry}
                    material={materials.Wolf3D_Skin}
                    skeleton={nodes.Wolf3D_Head.skeleton}
                    morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                    morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
                />
                <skinnedMesh
                    name="Wolf3D_Teeth"
                    geometry={nodes.Wolf3D_Teeth.geometry}
                    material={materials.Wolf3D_Teeth}
                    skeleton={nodes.Wolf3D_Teeth.skeleton}
                    morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                    morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Glasses.geometry}
                    material={materials.Wolf3D_Glasses}
                    skeleton={nodes.Wolf3D_Glasses.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Outfit_Top.geometry}
                    material={materials.Wolf3D_Outfit_Top}
                    skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                    material={materials.Wolf3D_Outfit_Bottom}
                    skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                    material={materials.Wolf3D_Outfit_Footwear}
                    skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Body.geometry}
                    material={materials.Wolf3D_Body}
                    skeleton={nodes.Wolf3D_Body.skeleton}
                />
            </group>
        </Suspense>
    );
}

export function DeveloperModel({ animateName = 'idle', ...props }) {
    const { nodes, materials } = useGLTF('/models/human/bluecloth.glb');
    const group = useRef();

    // Function to load animations asynchronously
    const loadAnimation = (path) => {
        try {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            const { animations } = useFBX(path);
            return animations;
        } catch (error) {
            console.error(`Failed to load animation from ${path}`, error);
            return [];
        }
    };

    // Load all animations
    const idleDeveloperAnimation = loadAnimation('/models/animations/idle.fbx');
    const saluteDeveloperAnimation = loadAnimation('/models/animations/salute.fbx');
    const victoryDeveloperAnimation = loadAnimation('/models/animations/victory.fbx');
    const clappingDeveloperAnimation = loadAnimation('/models/animations/clapping.fbx');

    // Log loaded animations
    console.log('Idle Animation:', idleDeveloperAnimation);
    console.log('Salute Animation:', saluteDeveloperAnimation);
    console.log('Victory Animation:', victoryDeveloperAnimation);
    console.log('Clapping Animation:', clappingDeveloperAnimation);

    // Check if animations were loaded successfully
    if (
        idleDeveloperAnimation.length > 0 &&
        saluteDeveloperAnimation.length > 0 &&
        victoryDeveloperAnimation.length > 0 &&
        clappingDeveloperAnimation.length > 0
    ) {
        idleDeveloperAnimation[0].name = 'idle';
        saluteDeveloperAnimation[0].name = 'salute';
        victoryDeveloperAnimation[0].name = 'victory';
        clappingDeveloperAnimation[0].name = 'clapping';
        console.log('All animations loaded and renamed.');
    } else {
        console.error('One or more animations could not be loaded.');
    }

    const { actions } = useAnimations(
        [
            idleDeveloperAnimation[0],
            saluteDeveloperAnimation[0],
            clappingDeveloperAnimation[0],
            victoryDeveloperAnimation[0],
        ],
        group
    );

    useEffect(() => {
        console.log('Available actions:', actions);

        if (actions && actions[animateName]) {
            console.log(`Playing animation: ${animateName}`);
            actions[animateName].reset().fadeIn(0.5).play();
        } else {
            console.error(
                `Animation "${animateName}" not found. Available animations:`,
                Object.keys(actions || {})
            );
        }

        // Cleanup on unmount
        return () => {
            if (actions && actions[animateName]) {
                actions[animateName].fadeOut(0.5);
            }
        };
    }, [actions, animateName]);

    return (
        <Suspense fallback={null}>
            <group ref={group} {...props} dispose={null}>
                <primitive object={nodes.Hips} />
                <skinnedMesh
                    name="EyeLeft"
                    geometry={nodes.EyeLeft.geometry}
                    material={materials.Wolf3D_Eye}
                    skeleton={nodes.EyeLeft.skeleton}
                    morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                    morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
                />
                <skinnedMesh
                    name="EyeRight"
                    geometry={nodes.EyeRight.geometry}
                    material={materials.Wolf3D_Eye}
                    skeleton={nodes.EyeRight.skeleton}
                    morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                    morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
                />
                <skinnedMesh
                    name="Wolf3D_Head"
                    geometry={nodes.Wolf3D_Head.geometry}
                    material={materials.Wolf3D_Skin}
                    skeleton={nodes.Wolf3D_Head.skeleton}
                    morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                    morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
                />
                <skinnedMesh
                    name="Wolf3D_Teeth"
                    geometry={nodes.Wolf3D_Teeth.geometry}
                    material={materials.Wolf3D_Teeth}
                    skeleton={nodes.Wolf3D_Teeth.skeleton}
                    morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                    morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Hair.geometry}
                    material={materials.Wolf3D_Hair}
                    skeleton={nodes.Wolf3D_Hair.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Glasses.geometry}
                    material={materials.Wolf3D_Glasses}
                    skeleton={nodes.Wolf3D_Glasses.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Outfit_Top.geometry}
                    material={materials.Wolf3D_Outfit_Top}
                    skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                    material={materials.Wolf3D_Outfit_Bottom}
                    skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                    material={materials.Wolf3D_Outfit_Footwear}
                    skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
                />
                <skinnedMesh
                    geometry={nodes.Wolf3D_Body.geometry}
                    material={materials.Wolf3D_Body}
                    skeleton={nodes.Wolf3D_Body.skeleton}
                />
            </group>
        </Suspense>
    );
}

useGLTF.preload('/models/human/bluecloth.glb');
